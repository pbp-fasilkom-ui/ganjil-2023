"use strict";(self.webpackChunk_pbp_fasilkom_ui_ganjil_2023=self.webpackChunk_pbp_fasilkom_ui_ganjil_2023||[]).push([[8124],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>u});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=a.createContext({}),d=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=d(e.components);return a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),c=d(n),u=o,h=c["".concat(p,".").concat(u)]||c[u]||m[u]||r;return n?a.createElement(h,i(i({ref:t},s),{},{components:n})):a.createElement(h,i({ref:t},s))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=c;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var d=2;d<r;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},8038:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var a=n(7462),o=(n(7294),n(3905));const r={sidebar_label:"Lab 8"},i="Tutorial 8: Model in Flutter and Communication with Web Services",l={unversionedId:"tutorial/tutorial-8",id:"tutorial/tutorial-8",title:"Tutorial 8: Model in Flutter and Communication with Web Services",description:"Platform-Based Development (CSGE602022) - Organized by Faculty of Computer Science University of Indonesia, Odd Term 2022/2023",source:"@site/i18n/en/docusaurus-plugin-content-docs-assignments/current/tutorial/tutorial-8.md",sourceDirName:"tutorial",slug:"/tutorial/tutorial-8",permalink:"/ganjil-2023/en/assignments/tutorial/tutorial-8",draft:!1,tags:[],version:"current",frontMatter:{sidebar_label:"Lab 8"},sidebar:"tutorialSidebar",previous:{title:"Lab 7",permalink:"/ganjil-2023/en/assignments/tutorial/tutorial-7"},next:{title:"Lab 9",permalink:"/ganjil-2023/en/assignments/tutorial/tutorial-9"}},p={},d=[{value:"Learning Objectives",id:"learning-objectives",level:2},{value:"Model in Flutter",id:"model-in-flutter",level:2},{value:"Fetch Data from Web Service in Flutter",id:"fetch-data-from-web-service-in-flutter",level:2},{value:"Tutorial: File Refactor",id:"tutorial-file-refactor",level:2},{value:"Tutorial: Creating Custom Models",id:"tutorial-creating-custom-models",level:2},{value:"Tutorial: Adding HTTP Dependencies",id:"tutorial-adding-http-dependencies",level:2},{value:"Tutorial: Retrieve and Process Data from Web Service",id:"tutorial-retrieve-and-process-data-from-web-service",level:2},{value:"Tutorial: Display Data from Web Service",id:"tutorial-display-data-from-web-service",level:2},{value:"Final Word",id:"final-word",level:2},{value:"Additional Reference",id:"additional-reference",level:2},{value:"Contributor",id:"contributor",level:2}],s={toc:d};function m(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"tutorial-8-model-in-flutter-and-communication-with-web-services"},"Tutorial 8: Model in Flutter and Communication with Web Services"),(0,o.kt)("p",null,"Platform-Based Development (CSGE602022) - Organized by Faculty of Computer Science University of Indonesia, Odd Term 2022/2023"),(0,o.kt)("h2",{id:"learning-objectives"},"Learning Objectives"),(0,o.kt)("p",null,"After completing this tutorial, students are expected to:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Understand the structure and model creation in Flutter."),(0,o.kt)("li",{parentName:"ul"},"Understand how to retrieve, process, and display data from a ",(0,o.kt)("em",{parentName:"li"},"web service"),".")),(0,o.kt)("h2",{id:"model-in-flutter"},"Model in Flutter"),(0,o.kt)("p",null,"In this tutorial, we will make a web service call to display the data from it to the Flutter page we created. However, before making a web service call, we need to define the model that we use when making a web service call. The model in Flutter uses the ",(0,o.kt)("em",{parentName:"p"},"class")," principle as learned in the DDP2 OOP section."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"The code below is an example, not required, but highly recommended to read as the concepts will be used in the following tutorial sections.\n")),(0,o.kt)("p",null,"The example below is an example of a ",(0,o.kt)("em",{parentName:"p"},"class")," in Flutter."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"class Vehicle {\n    Vehicle({\n        this.id,\n        this.brand,\n        this.model\n        this.color\n    });\n\n    int id;\n    String brand;\n    String model;\n    String color;\n}\n")),(0,o.kt)("p",null,"Notes: If you encounter an error when creating a class, add the ",(0,o.kt)("inlineCode",{parentName:"p"},"required")," keyword to each class parameter in the constructor."),(0,o.kt)("p",null,"Up to this point, we have successfully created a ",(0,o.kt)("em",{parentName:"p"},"class")," named ",(0,o.kt)("inlineCode",{parentName:"p"},"Vehicle"),". Next, we will add some code until we successfully create a ",(0,o.kt)("inlineCode",{parentName:"p"},"Vehicle")," model. This ",(0,o.kt)("inlineCode",{parentName:"p"},"Vehicle")," is a model that represents the response from the ",(0,o.kt)("em",{parentName:"p"},"web service")," call."),(0,o.kt)("p",null,"Add the import from dart convert at the ",(0,o.kt)("strong",{parentName:"p"},"very first line")," of the file."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"import 'dart:convert';\n")),(0,o.kt)("p",null,"In the ",(0,o.kt)("inlineCode",{parentName:"p"},"Vehicle")," ",(0,o.kt)("em",{parentName:"p"},"class"),", add the following code."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},'factory Vehicle.fromJson(Map<String, dynamic> json) => Vehicle(\n    id: json["id"],\n    brand: json["brand"],\n    model: json["model"],\n    color: json["color"],\n);\n\nMap<String, dynamic> toJson() => {\n    "id": id,\n    "brand": brand,\n    "model": model,\n    "color": color,\n};\n')),(0,o.kt)("p",null,"Add the following code outside the ",(0,o.kt)("inlineCode",{parentName:"p"},"Vehicle")," ",(0,o.kt)("em",{parentName:"p"},"class"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"Vehicle vehicleFromJson(String str) => Vehicle.fromJson(json.decode(str));\nString vehicleToJson(Vehicle data) => json.encode(data.toJson());\n")),(0,o.kt)("p",null,"The final code will be as follows to display one ",(0,o.kt)("inlineCode",{parentName:"p"},"Vehicle")," object from the ",(0,o.kt)("em",{parentName:"p"},"web service")," response."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},'import \'dart:convert\';\n\nVehicle vehicleFromJson(String str) => Vehicle.fromJson(json.decode(str));\nString vehicleToJson(Vehicle data) => json.encode(data.toJson());\n\nclass Vehicle {\n    Vehicle({\n        this.id,\n        this.brand,\n        this.model,\n        this.color,\n    });\n\n    int id;\n    String brand;\n    String model;\n    String color;\n\n    factory Vehicle.fromJson(Map<String, dynamic> json) => Vehicle(\n         id: json["id"],\n         brand: json["brand"],\n         model: json["model"],\n         color: json["color"],\n    );\n\n    Map<String, dynamic> toJson() => {\n          "id": id,\n          "brand": brand,\n          "model": model,\n          "color": color,\n    };\n}\n')),(0,o.kt)("p",null,"The explanation of the code above is as follows."),(0,o.kt)("p",null,"There are some additional method such as ",(0,o.kt)("inlineCode",{parentName:"p"},"toJson")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"fromJson")," in the ",(0,o.kt)("inlineCode",{parentName:"p"},"Vehicle")," class. We have to create this method because when we request a web service with ",(0,o.kt)("em",{parentName:"p"},"method")," ",(0,o.kt)("strong",{parentName:"p"},"GET"),", we generally get the result of the call in the form of JSON response. Therefore, we need to convert the data with the ",(0,o.kt)("inlineCode",{parentName:"p"},"fromJson")," ",(0,o.kt)("em",{parentName:"p"},"method")," so that Flutter recognizes the JSON as a ",(0,o.kt)("inlineCode",{parentName:"p"},"Vehicle")," ",(0,o.kt)("em",{parentName:"p"},"class")," object. In addition, ",(0,o.kt)("inlineCode",{parentName:"p"},"toJson")," method will be used when we send data to a ",(0,o.kt)("em",{parentName:"p"},"web service")," (such as ",(0,o.kt)("strong",{parentName:"p"},"POST")," or ",(0,o.kt)("strong",{parentName:"p"},"PUT")," method)."),(0,o.kt)("p",null,"Here is an example of a response from a ",(0,o.kt)("em",{parentName:"p"},"web service")," with the ",(0,o.kt)("strong",{parentName:"p"},"GET")," ",(0,o.kt)("em",{parentName:"p"},"method")," that can be converted to the ",(0,o.kt)("strong",{parentName:"p"},"Vehicle")," model ",(0,o.kt)("em",{parentName:"p"},"class"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n   "id": 1,\n   "brand": "Honda",\n   "model": "Civic",\n   "color": "Yellow"\n}\n')),(0,o.kt)("p",null,"Then, what if the response from the ",(0,o.kt)("em",{parentName:"p"},"web service")," is a collection of JSON objects? Actually, it is the same as the code above, except that there is a change in the ",(0,o.kt)("inlineCode",{parentName:"p"},"vehicleFromJson")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"vehicleToJson")," ",(0,o.kt)("em",{parentName:"p"},"method"),"."),(0,o.kt)("p",null,"The example can be seen below:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"List<Vehicle> vehicleFromJson(String str) => List<Vehicle>.from(json.decode(str).map((vehicle) => Vehicle.fromJson(vehicle)));\n\nString vehicleToJson(List<Vehicle> data) => json.encode(List<dynamic>.from(data.map((vehicle) => vehicle.toJson())));\n")),(0,o.kt)("p",null,"Here is an example of a response from a ",(0,o.kt)("em",{parentName:"p"},"web service")," with a ",(0,o.kt)("strong",{parentName:"p"},"GET")," ",(0,o.kt)("em",{parentName:"p"},"method")," that can be converted to the ",(0,o.kt)("inlineCode",{parentName:"p"},"Vehicle")," model."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "id": 1,\n    "brand": "Honda",\n    "model": "Civic",\n    "color": "Yellow"\n  },\n  {\n    "id": 2,\n    "brand": "Toyota",\n    "model": "Supra",\n    "color": "Red"\n  }\n]\n')),(0,o.kt)("h2",{id:"fetch-data-from-web-service-in-flutter"},"Fetch Data from Web Service in Flutter"),(0,o.kt)("p",null,"As a ",(0,o.kt)("em",{parentName:"p"},"developer"),", of course we need the data to be displayed to the ",(0,o.kt)("em",{parentName:"p"},"client"),". This requires you to know how to do ",(0,o.kt)("em",{parentName:"p"},"fetching data")," from ",(0,o.kt)("em",{parentName:"p"},"web service")," and then display it to the application that we have created before."),(0,o.kt)("p",null,"In general, there are several steps when you want to display data from the ",(0,o.kt)("em",{parentName:"p"},"web services")," to the Flutter application, namely:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Adding the ",(0,o.kt)("inlineCode",{parentName:"li"},"http")," ",(0,o.kt)("em",{parentName:"li"},"dependency")," to the project, this ",(0,o.kt)("em",{parentName:"li"},"dependency")," is used to exchange data through ",(0,o.kt)("em",{parentName:"li"},"HTTP requests"),", such as ",(0,o.kt)("strong",{parentName:"li"},"GET"),", ",(0,o.kt)("strong",{parentName:"li"},"POST"),", ",(0,o.kt)("strong",{parentName:"li"},"PUT"),", and others."),(0,o.kt)("li",{parentName:"ol"},"Define the model from the response of the data coming from the ",(0,o.kt)("em",{parentName:"li"},"web service"),"."),(0,o.kt)("li",{parentName:"ol"},"Make an ",(0,o.kt)("em",{parentName:"li"},"http request")," to the ",(0,o.kt)("em",{parentName:"li"},"web service")," using the ",(0,o.kt)("inlineCode",{parentName:"li"},"http")," ",(0,o.kt)("em",{parentName:"li"},"dependency"),"."),(0,o.kt)("li",{parentName:"ol"},"Convert the objects obtained from the ",(0,o.kt)("em",{parentName:"li"},"web service")," to the model that we created in the second step."),(0,o.kt)("li",{parentName:"ol"},"Display data that has been converted to an application with ",(0,o.kt)("inlineCode",{parentName:"li"},"FutureBuilder"),".")),(0,o.kt)("p",null,"You can read the details in the following link: ",(0,o.kt)("a",{parentName:"p",href:"https://docs.flutter.dev/cookbook/networking/fetch-data#5-display-the-data"},"https://docs.flutter.dev/cookbook/networking/fetch-data#5-display-the-data")),(0,o.kt)("h2",{id:"tutorial-file-refactor"},"Tutorial: File Refactor"),(0,o.kt)("p",null,"Code refactoring (",(0,o.kt)("em",{parentName:"p"},"refactor code"),") is the process of restructuring existing program code without changing the ",(0,o.kt)("em",{parentName:"p"},"behavior")," of the program. This process is done to improve readability, reduce code complexity, and facilitate future ",(0,o.kt)("em",{parentName:"p"},"maintenance"),"."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Open the project that was previously created in the previous tutorial using your favorite IDE."),(0,o.kt)("li",{parentName:"ol"},"Inside the ",(0,o.kt)("inlineCode",{parentName:"li"},"lib")," folder, create two new folders named ",(0,o.kt)("inlineCode",{parentName:"li"},"model")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"page"),"."),(0,o.kt)("li",{parentName:"ol"},"Move files other than ",(0,o.kt)("inlineCode",{parentName:"li"},"main.dart")," into the ",(0,o.kt)("inlineCode",{parentName:"li"},"page")," folder.")),(0,o.kt)("h2",{id:"tutorial-creating-custom-models"},"Tutorial: Creating Custom Models"),(0,o.kt)("p",null,"In creating a model that adapts to JSON data, we can utilize the website ",(0,o.kt)("a",{parentName:"p",href:"https://app.quicktype.io/"},"Quicktype")," with the following steps."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Open the link URL ",(0,o.kt)("a",{parentName:"p",href:"https://jsonplaceholder.typicode.com/todos?_start=0&_limit=10"},"https://jsonplaceholder.typicode.com/todos?_start=0&_limit=10")," to obtain the JSON data.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Copy the JSON data from the previous link URL, then open the link URL ",(0,o.kt)("a",{parentName:"p",href:"https://app.quicktype.io/"},"Quicktype"),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"From the Quicktype website, change the ",(0,o.kt)("em",{parentName:"p"},"setup name")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"ToDo"),", ",(0,o.kt)("em",{parentName:"p"},"source type")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"JSON"),", and ",(0,o.kt)("em",{parentName:"p"},"language")," to Dart.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Paste the copied JSON data into the ",(0,o.kt)("em",{parentName:"p"},"textbox")," provided in the Quicktype."),(0,o.kt)("p",{parentName:"li"},"Here is an example of the result."),(0,o.kt)("p",{parentName:"li"},(0,o.kt)("img",{parentName:"p",src:"https://i.ibb.co/B6Vjj44/quicktype-example.png",alt:"Quicktype Example"}))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Click the ",(0,o.kt)("inlineCode",{parentName:"p"},"Copy Code")," option in Quicktype."))),(0,o.kt)("p",null,"After getting the ",(0,o.kt)("inlineCode",{parentName:"p"},"ToDo")," model code via Quicktype, reopen the Flutter project and perform the following steps."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Create a new file in the ",(0,o.kt)("inlineCode",{parentName:"li"},"lib/model")," folder with the name ",(0,o.kt)("inlineCode",{parentName:"li"},"to_do.dart"),"."),(0,o.kt)("li",{parentName:"ol"},"Paste the previously copied code into the ",(0,o.kt)("inlineCode",{parentName:"li"},"to_do.dart")," file.")),(0,o.kt)("p",null,"Notes: If you encounter an error when creating a model, add the required keyword to each model parameter in the constructor."),(0,o.kt)("h2",{id:"tutorial-adding-http-dependencies"},"Tutorial: Adding HTTP Dependencies"),(0,o.kt)("p",null,"To perform the ",(0,o.kt)("em",{parentName:"p"},"HTTP request"),", we need an additional ",(0,o.kt)("em",{parentName:"p"},"package")," named ",(0,o.kt)("a",{parentName:"p",href:"https://pub.dev/packages/http"},"http"),"."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Run the command ",(0,o.kt)("inlineCode",{parentName:"p"},"flutter pub add http")," on the Flutter project terminal to add the ",(0,o.kt)("inlineCode",{parentName:"p"},"http")," ",(0,o.kt)("em",{parentName:"p"},"package"),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"In the android manifest file in ",(0,o.kt)("inlineCode",{parentName:"p"},"android/app/src/main/AndroidManifest.xml"),", add the following code to allow Internet access in the Flutter application that we created."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-xml"},'...\n    <application>\n    ...\n    </application>\n    \x3c!-- Required to fetch data from the Internet. --\x3e\n    <uses-permission android:name="android.permission.INTERNET" />\n...\n')))),(0,o.kt)("h2",{id:"tutorial-retrieve-and-process-data-from-web-service"},"Tutorial: Retrieve and Process Data from Web Service"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Create a new file in the ",(0,o.kt)("inlineCode",{parentName:"p"},"lib/page")," folder with the name ",(0,o.kt)("inlineCode",{parentName:"p"},"to_do_page.dart"),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"In the ",(0,o.kt)("inlineCode",{parentName:"p"},"to_do_page.dart")," file, add the necessary imports. Change <APP_NAME> to the name of your Flutter project."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"import 'package:http/http.dart' as http;\nimport 'dart:convert';\nimport 'package:<APP_NAME>/model/to_do.dart';\n...\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Create a ",(0,o.kt)("em",{parentName:"p"},"stateful widget")," with the class name ",(0,o.kt)("inlineCode",{parentName:"p"},"ToDoPage"),". An example of a stateful widget structure can be seen at the following ",(0,o.kt)("a",{parentName:"p",href:"https://api.flutter.dev/flutter/widgets/StatefulWidget-class.html"},"link"),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Retrieve data from the URL ",(0,o.kt)("a",{parentName:"p",href:"https://jsonplaceholder.typicode.com/todos?_start=0&_limit=10"},"https://jsonplaceholder.typicode.com/todos?_start=0&_limit=10")," using the ",(0,o.kt)("inlineCode",{parentName:"p"},"http.get")," method."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-dart"},'class ToDoPage extends StatefulWidget {\n    const ToDoPage({Key? key}) : super(key: key);\n\n    @override\n    _ToDoPageState createState() => _ToDoPageState();\n}\n\nclass _ToDoPageState extends State<ToDoPage> {\n    Future<List<ToDo>> fetchToDo() async {\n        var url = Uri.parse(\'https://jsonplaceholder.typicode.com/todos?_start=0&_limit=10\');\n        var response = await http.get(\n        url,\n        headers: {\n            "Access-Control-Allow-Origin": "*",\n            "Content-Type": "application/json",\n        },\n        );\n\n        // decode the response into the json form\n        var data = jsonDecode(utf8.decode(response.bodyBytes));\n\n        // convert the json data into ToDo object\n        List<ToDo> listToDo = [];\n        for (var d in data) {\n            if (d != null) {\n                listToDo.add(ToDo.fromJson(d));\n            }\n        }\n\n        return listToDo;\n    }\n    ...\n}\n')))),(0,o.kt)("h2",{id:"tutorial-display-data-from-web-service"},"Tutorial: Display Data from Web Service"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"In the ",(0,o.kt)("inlineCode",{parentName:"p"},"main.dart")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"form.dart")," files, add the following code to add the To Do menu to the drawer we have created (place it under the ",(0,o.kt)("inlineCode",{parentName:"p"},"ListTile")," form menu)."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"ListTile(\n    title: const Text('To Do'),\n    onTap: () {\n        // Route the menu to the to do page\n        Navigator.pushReplacement(\n        context,\n        MaterialPageRoute(builder: (context) => const ToDoPage()),\n        );\n    },\n),\n")),(0,o.kt)("p",{parentName:"li"},"So the code becomes like this:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"...\nListTile(\n    title: const Text('Form'),\n    onTap: () {\n    // Route the menu to the form page\n    Navigator.pushReplacement(\n        context,\n        MaterialPageRoute(builder: (context) => const MyFormPage()),\n        );\n    },\n),\nListTile(\n        title: const Text('To Do'),\n        onTap: () {\n        // Route the menu to the to do page\n        Navigator.pushReplacement(\n            context,\n            MaterialPageRoute(builder: (context) => const ToDoPage()),\n            );\n        },\n    ),\n...\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"In the ",(0,o.kt)("inlineCode",{parentName:"p"},"Widget(BuildContext context)")," section, add the following code after ",(0,o.kt)("inlineCode",{parentName:"p"},"return"),"."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"Scaffold(\n    appBar: AppBar(\n        title: const Text('To Do'),\n    ),\n    drawer: Drawer(\n        child: Column(\n        children: [\n            // Adding clickable menu\n            ListTile(\n            title: const Text('Counter'),\n            onTap: () {\n                // Route the menu to the main page\n                Navigator.pushReplacement(\n                context,\n                MaterialPageRoute(builder: (context) => const MyApp()),\n                );\n            },\n            ),\n            ListTile(\n            title: const Text('Form'),\n            onTap: () {\n                // Route the menu to the form page\n                Navigator.pushReplacement(\n                context,\n                MaterialPageRoute(builder: (context) => const MyFormPage()),\n                );\n            },\n            ),\n            ListTile(\n            title: const Text('ToDo'),\n            onTap: () {\n                // Route the menu to the to do page\n                Navigator.pushReplacement(\n                context,\n                MaterialPageRoute(builder: (context) => const ToDoPage()),\n                );\n            },\n            ),\n        ],\n        ),\n    ),\n    body: FutureBuilder(\n        future: fetchToDo(),\n        builder: (context, AsyncSnapshot snapshot) {\n            if (snapshot.data == null) {\n            return const Center(child: CircularProgressIndicator());\n            } else {\n            if (!snapshot.hasData) {\n                return Column(\n                children: const [\n                    Text(\n                    \"To do list is empty :(\",\n                    style: TextStyle(\n                        color: Color(0xff59A5D8),\n                        fontSize: 20),\n                    ),\n                    SizedBox(height: 8),\n                ],\n                );\n            } else {\n                return ListView.builder(\n                    itemCount: snapshot.data!.length,\n                    itemBuilder: (_, index)=> Container(\n                    margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),\n                    padding: const EdgeInsets.all(20.0),\n                    decoration: BoxDecoration(\n                        color:Colors.white,\n                        borderRadius: BorderRadius.circular(15.0),\n                        boxShadow: const [\n                        BoxShadow(\n                            color: Colors.black,\n                            blurRadius: 2.0\n                        )\n                        ]\n                    ),\n                    child: Column(\n                        mainAxisAlignment: MainAxisAlignment.start,\n                        crossAxisAlignment: CrossAxisAlignment.start,\n                        children: [\n                        Text(\n                            \"${snapshot.data![index].title}\",\n                            style: const TextStyle(\n                            fontSize: 18.0,\n                            fontWeight: FontWeight.bold,\n                            ),\n                        ),\n                        const SizedBox(height: 10),\n                        Text(\"${snapshot.data![index].completed}\"),\n                        ],\n                    ),\n                    )\n                );\n            }\n            }\n        }\n    )\n);\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Restart the application by pressing the ",(0,o.kt)("inlineCode",{parentName:"p"},"r")," key on the ",(0,o.kt)("em",{parentName:"p"},"command line")," or ",(0,o.kt)("em",{parentName:"p"},"terminal")," where you are running the Flutter application. The result will be as shown below."),(0,o.kt)("p",{parentName:"li"},(0,o.kt)("img",{parentName:"p",src:"https://i.ibb.co/q1tqwqR/todo-page-example.png",alt:"Example App"})))),(0,o.kt)("h2",{id:"final-word"},"Final Word"),(0,o.kt)("p",null,"Congratulations, you've learned about models and web services in Flutter!"),(0,o.kt)("p",null,"If you're up for a challenge, then try applying the following to this tutorial."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"Refactor")," the ",(0,o.kt)("inlineCode",{parentName:"li"},"fetchToDo")," ",(0,o.kt)("em",{parentName:"li"},"method")," to a separate file.")),(0,o.kt)("h2",{id:"additional-reference"},"Additional Reference"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.flutter.dev/cookbook/networking/fetch-data"},"Fetch Data From the Internet")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://thegrowingdeveloper.org/coding-blog/how-to-create-models-in-flutter-dart"},"How to create models in Flutter Dart"))),(0,o.kt)("h2",{id:"contributor"},"Contributor"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Zuhal 'Alimul Hadi"),(0,o.kt)("li",{parentName:"ul"},"Sabyna Maharani"),(0,o.kt)("li",{parentName:"ul"},"Brandon Ivander"),(0,o.kt)("li",{parentName:"ul"},"Muhammad Athallah"),(0,o.kt)("li",{parentName:"ul"},"Firlandi A. R. Ansyari (EN Translator)")))}m.isMDXComponent=!0}}]);